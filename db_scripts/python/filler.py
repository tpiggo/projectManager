# Functions for filling the database with garbage.
# DELETE CONTENTS OF DB BEFORE EXPORTING!
# 

# Imports
from faker import Faker
import MySQLdb
import random
# create faker
m_fake = Faker()
# Connection information to localhosted DB
# MUST BE RUNNING (Don't forget to start your db server)
db_connection = {
    'host': 'localhost',
    'user': 'root',
    'password': '', #No pass on my root (fix for your machine)
    'port': 3306,
    'db': 'ProjectDB'
}
# Connection
m_conn = MySQLdb.connect(
    host=db_connection['host'],
    user=db_connection['user'],
    passwd=db_connection['password'],
    db=db_connection['db'],
    port=db_connection['port']
)

def createFakeData():
    print("Starting createDB function")
    tables = [
        'department',
        'company',
        'priority',
        'direction',
        'objective'
        'supporters', 
        'stakeholders',
        'milestones',
        'KPI',
        'projecttype',
        'project'
    ]
    fill_table(tables[0], get_table_fields(tables[0]), 16, create_names)
    fill_table(tables[1], get_table_fields(tables[1]), 20, create_names)
    


def fill_table(table_name: str, field_names: list, nb_entries: int, creator_func):
    sql_query = f'INSERT INTO {table_name} ('
    for i in field_names:
        sql_query += i
    sql_query += f') VALUES ' + create_query(creator_func, nb_entries, table_name)
    print(sql_query)
    # The printed outputs will be put into an SQL script and executed within DBeaver

def create_query(single_query, nb_entries: int, p_type: str):
    """
    Creates a query given a function for creating a singluar entry
    """
    qualified_query = ''
    for i in range(0, nb_entries):
        qualified_query += f'({single_query(p_type)})'
        if (i < nb_entries-1):
            qualified_query += ', '
    return qualified_query

def get_table_fields(table_name: str):
    """
    Get the field_names from the specified table
    """
    cursor = m_conn.cursor()
    cursor.execute(f'SELECT * FROM {table_name} LIMIT 0')
    field_names = [ i[0] for i in cursor.description ]
    cursor.execute(f'SHOW KEYS FROM {table_name} WHERE Key_name = \'PRIMARY\'')
    n = 0
    for i in cursor.description:
        if (i[0] == 'Column_name'):
            break
        n += 1 
    primary_keys = [i[n] for i in cursor]
    field_names = [i for i in field_names if i not in primary_keys]
    return field_names

def create_names(p_type: str):
    """
    :type p_type string
    returns random name generated by the function
    """
    faker_split = m_fake.sentence().split(' ')
    name = faker_split[0] 
    hasExtra = random.randint(0,2)
    if (hasExtra > 0 and p_type == 'company'):
        name += " " + faker_split[1][:1].upper() + faker_split[1][1:] 
    if (hasExtra > 1 and len(faker_split) > 1 and p_type == 'company'):
        faker_split[2] =  faker_split[2][:1].upper() + faker_split[2][1:]
        faker_split[2] = faker_split[2].replace(".", '')
        name += " " + faker_split[2]
    return f'\'{name}\''

if __name__=='__main__':
    print("Started!")
    createFakeData()